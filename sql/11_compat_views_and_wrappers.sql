-- Compatibility views and wrappers under old namespaces

-- 1) Compatibility view for ZAPPCONFIGMETADATA
CREATE OR REPLACE VIEW DEV_PAYMENTS_BRONZE_RAW.ZAPP_PAYMENTS.ZAPPCONFIGMETADATA(
  PIPECREATE,
  CREATESTREAM,
  TARGETDB,
  RAWDB,
  FINALSCHEMA,
  STAGENAME,
  PATH,
  "SPLIT(PATH,'/')",
  DATABASENAME,
  SCHEMANAME,
  TABLENAME
) AS
SELECT
  c.PIPECREATE,
  c.CREATESTREAM,
  c.DATABASENAME AS TARGETDB,
  c.DATABASENAME AS RAWDB,
  'RAW' AS FINALSCHEMA,
  v.STAGE_FQN AS STAGENAME,
  c.PATH,
  SPLIT(c.PATH,'/') AS "SPLIT(PATH,'/')",
  c.DATABASENAME,
  c.SCHEMANAME,
  c.TABLENAME
FROM DEV_DBM.INGESTION_METADATA.CONFIG_METADATA c
JOIN (
  SELECT DISTINCT DBNAME, SCHEMANAME, TABLENAME, STAGE_FQN
  FROM DEV_DBM.INGESTION_METADATA.VW_METADATA
) v
  ON UPPER(v.DBNAME)=UPPER(c.DATABASENAME)
 AND UPPER(v.SCHEMANAME)=UPPER(c.SCHEMANAME)
 AND UPPER(v.TABLENAME)=UPPER(c.TABLENAME);

-- 2) Compatibility view for VW_AUTOMETADATARAW
CREATE OR REPLACE VIEW DEV_PAYMENTS_BRONZE_RAW.ZAPP_PAYMENTS.VW_AUTOMETADATARAW AS
SELECT
  DBNAME,
  SCHEMANAME,
  TABLENAME,
  COLUMNNAME,
  DATATYPE,
  IFF(PRIMARYKEYFLAG, 'TRUE', 'FALSE') AS PRIMARYKEYFLAG,
  TO_VARCHAR(ORDINAL_POSITION) AS ORDINAL_POSITION,
  CREATEDDATE
FROM DEV_DBM.INGESTION_METADATA.VW_METADATA;

-- 3) Wrapper procedures under old ZAPP_PAYMENTS schema
CREATE OR REPLACE PROCEDURE DEV_PAYMENTS_BRONZE_RAW.ZAPP_PAYMENTS.CreateSchemaIfNotExists(
  DB_NAME VARCHAR,
  SCHEMA_NAME VARCHAR,
  BUSINESS_UNIT VARCHAR
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
  CALL DEV_DBM.INGESTION_METADATA.CREATE_SCHEMAS_IF_NOT_EXISTS(:DB_NAME);
  RETURN ''Successful'';
END';

CREATE OR REPLACE PROCEDURE DEV_PAYMENTS_BRONZE_RAW.ZAPP_PAYMENTS.CreateNewTables(
  DBNAME VARCHAR,
  SCHEMANAME VARCHAR,
  TABLENAMEINPUT VARCHAR,
  CALLTYPE VARCHAR
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE r VARCHAR; BEGIN
  CALL DEV_DBM.INGESTION_METADATA.CREATE_NEW_TABLES(:DBNAME,:SCHEMANAME,:TABLENAMEINPUT,:CALLTYPE) INTO :r;
  RETURN :r;
END';

CREATE OR REPLACE PROCEDURE DEV_PAYMENTS_BRONZE_RAW.ZAPP_PAYMENTS.TaskToRefreshTargetTable(
  TABLENAMEINPUT VARCHAR,
  SCHEMANAMEINPUT VARCHAR,
  DBNAME VARCHAR
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE r VARCHAR; BEGIN
  CALL DEV_DBM.INGESTION_METADATA.TASK_TO_REFRESH_TARGET_TABLE(:TABLENAMEINPUT,:SCHEMANAMEINPUT,:DBNAME) INTO :r;
  RETURN :r;
END';

CREATE OR REPLACE PROCEDURE DEV_PAYMENTS_BRONZE_RAW.ZAPP_PAYMENTS.Check_Tasks_Exist(
  DATABASE_NAME VARCHAR,
  SCHEMA_NAME VARCHAR,
  TABLENAME VARCHAR
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE r VARCHAR; BEGIN
  CALL DEV_DBM.INGESTION_METADATA.CHECK_TASKS_EXIST(:DATABASE_NAME,:SCHEMA_NAME,:TABLENAME) INTO :r;
  RETURN :r;
END';

CREATE OR REPLACE PROCEDURE DEV_PAYMENTS_BRONZE_RAW.ZAPP_PAYMENTS.UpdateMetaDataFromView(
  TABLENAMEINPUT VARCHAR,
  SCHEMANAMEINPUT VARCHAR,
  DBNAME VARCHAR
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
BEGIN
  CALL DEV_DBM.INGESTION_METADATA.UPDATE_TABLE_METADATA(:DBNAME,:SCHEMANAMEINPUT,:TABLENAMEINPUT);
  RETURN ''MetaData Updated'';
END';

-- 4) Wrapper for old UPDATE_TABLE_METADATA path
CREATE OR REPLACE PROCEDURE DEV_PAYMENTS_BRONZE_RAW.ZAPP_PAYMENT_METADATA.UPDATE_TABLE_METADATA(
  DBNAME VARCHAR,
  SCHEMANAME VARCHAR,
  TABLENAMEINPUT VARCHAR
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE r VARCHAR; BEGIN
  CALL DEV_DBM.INGESTION_METADATA.UPDATE_TABLE_METADATA(:DBNAME,:SCHEMANAME,:TABLENAMEINPUT) INTO :r;
  RETURN :r;
END';