-- Procedure: DEV_DBM.INGESTION_METADATA.CREATE_NEW_TABLES
-- Uses VW_METADATA and CONFIG_METADATA to create RAW table, PIPE, STREAM, and VIEW

CREATE OR REPLACE PROCEDURE DEV_DBM.INGESTION_METADATA.CREATE_NEW_TABLES(
  DBNAME VARCHAR,
  SCHEMANAME VARCHAR,
  TABLENAMEINPUT VARCHAR,
  CALLTYPE VARCHAR
)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  v_stage_fqn STRING;
  v_path STRING;
  v_file_format_fqn STRING;
  v_pipe_create STRING;
  v_create_stream STRING;
  v_query STRING;
  v_view_query STRING;
  v_cast_select STRING;
BEGIN
  -- Ensure schemas exist
  CALL DEV_DBM.INGESTION_METADATA.CREATE_SCHEMAS_IF_NOT_EXISTS(:DBNAME);

  -- Ensure file format exists (idempotent)
  LET ff_name RESULTSET := (SELECT MAX(FILEFORMAT_NAME) FROM DEV_DBM.INGESTION_METADATA.VW_METADATA WHERE UPPER(DBNAME)=UPPER(:DBNAME) AND UPPER(SCHEMANAME)=UPPER(:SCHEMANAME) AND UPPER(TABLENAME)=UPPER(:TABLENAMEINPUT));
  LET curff CURSOR FOR ff_name; FOR r IN curff DO 
    IF r.MAX IS NOT NULL THEN
      CALL DEV_DBM.INGESTION_METADATA.ENSURE_FILE_FORMAT(:DBNAME, r.MAX);
    END IF;
  END FOR;

  -- Get config lines for this table
  LET cfg RESULTSET := (
    SELECT STAGE_FQN, PATH, FILE_FORMAT_FQN, PIPECREATE, CREATESTREAM
    FROM DEV_DBM.INGESTION_METADATA.CONFIG_METADATA
    WHERE UPPER(DATABASENAME)=UPPER(:DBNAME)
      AND UPPER(SCHEMANAME)=UPPER(:SCHEMANAME)
      AND UPPER(TABLENAME)=UPPER(:TABLENAMEINPUT)
  );
  LET c CURSOR FOR cfg; FOR rowv IN c DO
    v_stage_fqn := rowv.STAGE_FQN; v_path := rowv.PATH; v_file_format_fqn := rowv.FILE_FORMAT_FQN;
    v_pipe_create := rowv.PIPECREATE; v_create_stream := rowv.CREATESTREAM;
  END FOR;

  -- Build RAW table from inferred schema
  v_query := (
    SELECT 'CREATE OR REPLACE TABLE '||:DBNAME||'.RAW.RAW_'||:TABLENAMEINPUT||' ('||
           LISTAGG(COLUMN_NAME ||' '|| CASE WHEN TYPE LIKE ''NUMBER%'' THEN ''INT'' ELSE TYPE END, ',')||
           ', RAW_ROW_CRE_DT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(), FILENAME STRING)'
    FROM TABLE(INFER_SCHEMA(LOCATION=>:v_stage_fqn||'/'||:v_path, FILE_FORMAT=>:v_file_format_fqn, IGNORE_CASE=>TRUE))
  );
  EXECUTE IMMEDIATE :v_query;

  -- Create PIPE/STREAM when new
  IF (UPPER(:CALLTYPE) = ''NEW'') THEN
    EXECUTE IMMEDIATE :v_pipe_create;
    EXECUTE IMMEDIATE :v_create_stream;
  ELSE
    -- Ensure stream exists
    EXECUTE IMMEDIATE 'CREATE STREAM IF NOT EXISTS '||:DBNAME||'.RAW.ST_RAW_'||:TABLENAMEINPUT||' ON TABLE '||:DBNAME||'.RAW.RAW_'||:TABLENAMEINPUT||' APPEND_ONLY = TRUE';
  END IF;

  -- Build cast/projection for view from metadata
  SELECT LISTAGG(
           CASE WHEN UPPER(DATATYPE) = ''DATETIME'' THEN 'CASE WHEN '||COLUMNNAME||' = '''''' OR '||COLUMNNAME||' IS NULL THEN NULL ELSE TO_TIMESTAMP('||COLUMNNAME||', ''''MM/DD/YYYY HH12:MI:SS AM'''') END AS '||COLUMNNAME
                WHEN UPPER(DATATYPE) = ''BIT'' THEN 'CAST('||COLUMNNAME||' AS BOOLEAN) AS '||COLUMNNAME
                WHEN UPPER(DATATYPE) = ''MONEY'' THEN 'CAST('||COLUMNNAME||' AS NUMBER) AS '||COLUMNNAME
                WHEN UPPER(DATATYPE) = ''CHAR'' THEN 'CAST('||COLUMNNAME||' AS STRING) AS '||COLUMNNAME
                ELSE 'CAST('||COLUMNNAME||' AS '||UPPER(DATATYPE)||') AS '||COLUMNNAME END
           , ',')
    INTO :v_cast_select
  FROM DEV_DBM.INGESTION_METADATA.VW_METADATA
  WHERE UPPER(DBNAME)=UPPER(:DBNAME) AND UPPER(SCHEMANAME)=UPPER(:SCHEMANAME) AND UPPER(TABLENAME)=UPPER(:TABLENAMEINPUT);

  v_view_query := 'CREATE OR REPLACE VIEW '||:DBNAME||'.RAW.VW_ST_'||:TABLENAMEINPUT||' AS SELECT '
                   || :v_cast_select || ', RAW_ROW_CRE_DT, FILENAME, METADATA$ACTION AS METADATAACTION FROM '
                   || :DBNAME||'.RAW.ST_RAW_'||:TABLENAMEINPUT;
  EXECUTE IMMEDIATE :v_view_query;

  -- Create/refresh target task
  CALL DEV_DBM.INGESTION_METADATA.TASK_TO_REFRESH_TARGET_TABLE(:TABLENAMEINPUT, :SCHEMANAME, :DBNAME);

  RETURN ''Successful'';
END';